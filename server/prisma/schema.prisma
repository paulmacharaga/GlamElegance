generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String
  role      String   @default("user")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("users")
}

model ServiceCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?  // Icon name or URL for UI
  displayOrder Int     @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  services Service[]

  @@map("service_categories")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  categoryId  String
  basePrice   Float    // Base price for the service
  baseDuration Int     // Base duration in minutes
  isActive    Boolean  @default(true)
  displayOrder Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category ServiceCategory @relation(fields: [categoryId], references: [id])
  variants ServiceVariant[]
  bookings Booking[]

  @@map("services")
}

model ServiceVariant {
  id          String   @id @default(cuid())
  serviceId   String
  name        String   // e.g., "30 minutes", "Full Color", "With French Tips"
  description String?
  type        String   // e.g., "duration", "intensity", "addon"
  priceModifier Float  // Amount to add/subtract from base price
  durationModifier Int @default(0) // Minutes to add/subtract from base duration
  isActive    Boolean  @default(true)
  displayOrder Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  bookingVariants BookingServiceVariant[]

  @@map("service_variants")
}

model Staff {
  id            String   @id @default(cuid())
  name          String
  email         String?  @unique
  password      String
  phone         String?
  role          String   @default("staff")
  isActive      Boolean  @default(true)
  googleId      String?  @unique
  googleProfile String?
  avatar        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  bookings      Booking[]

  @@map("staff")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]

  @@map("customers")
}

model Booking {
  id            String   @id @default(cuid())
  customerName  String
  customerEmail String
  customerPhone String
  customerId    String?
  serviceId     String
  staffId       String?
  bookingDate   DateTime
  bookingTime   String
  status        String   @default("pending")
  notes         String?
  totalPrice    Float?   // Set by staff when confirming booking
  totalDuration Int?     // Calculated total duration including variants
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  customer      Customer? @relation(fields: [customerId], references: [id])
  service       Service   @relation(fields: [serviceId], references: [id])
  staff         Staff?    @relation(fields: [staffId], references: [id])
  serviceVariants BookingServiceVariant[]

  @@map("bookings")
}

model BookingServiceVariant {
  id        String @id @default(cuid())
  bookingId String
  variantId String

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  variant ServiceVariant @relation(fields: [variantId], references: [id])

  @@unique([bookingId, variantId])
  @@map("booking_service_variants")
}

model Feedback {
  id             String   @id @default(cuid())
  customerName   String
  customerEmail  String?
  serviceRating  Int
  staffRating    Int?
  overallRating  Int
  comments       String?
  serviceUsed    String?
  staffMember    String?
  wouldRecommend Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  @@map("feedback")
}

model Analytics {
  id        String   @id @default(cuid())
  type      String   // qr_scan, google_review_click, booking_created, feedback_submitted
  metadata  String?
  bookingId String?
  feedbackId String?
  timestamp DateTime @default(now())
  
  @@map("analytics")
}

model LoyaltyProgram {
  id                    String   @id @default(cuid())
  name                  String   @default("Hair Studio Rewards")
  description           String?
  pointsPerBooking      Int      @default(10)
  pointsPerDollar       Int      @default(1)
  rewardThreshold       Int      @default(100)
  rewardAmount          Float    @default(10.0)
  birthdayDiscountRate  Float    @default(20.0) // Birthday discount percentage
  birthdayDiscountDays  Int      @default(7)    // Days before/after birthday
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("loyalty_programs")
}

model Customer {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String?
  name          String
  phone         String?
  dateOfBirth   DateTime?
  address       String?
  isActive      Boolean  @default(true)
  googleId      String?  @unique
  googleProfile String?
  avatar        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  bookings      Booking[]
  loyalty       CustomerLoyalty?

  @@map("customers")
}

model CustomerLoyalty {
  id             String   @id @default(cuid())
  customerId     String   @unique
  customerEmail  String   @unique
  customerName   String
  customerPhone  String?
  totalPoints    Int      @default(0)
  lifetimePoints Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  customer       Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_loyalty")
}
