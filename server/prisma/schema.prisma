// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String
  role      String   @default("user")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // in minutes
  price       Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings Booking[]

  @@map("services")
}

model Staff {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]

  @@map("staff")
}

model Booking {
  id          String   @id @default(cuid())
  customerName String
  customerEmail String
  customerPhone String
  serviceId   String
  staffId     String?
  bookingDate DateTime
  bookingTime String
  status      String   @default("pending") // pending, confirmed, completed, cancelled
  notes       String?
  inspirationImages String[] // Array of image URLs
  currentHairImages Json?    // JSON object with front, back, top image URLs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  service Service @relation(fields: [serviceId], references: [id])
  staff   Staff?  @relation(fields: [staffId], references: [id])

  @@map("bookings")
}

model Feedback {
  id            String   @id @default(cuid())
  customerName  String
  customerEmail String?
  serviceRating Int      // 1-5
  staffRating   Int?     // 1-5
  overallRating Int      // 1-5
  comments      String?
  serviceUsed   String?
  staffMember   String?
  wouldRecommend Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("feedback")
}

model LoyaltyProgram {
  id               String   @id @default(cuid())
  name             String
  description      String?
  pointsPerBooking Int      @default(10)
  pointsPerDollar  Float    @default(1)
  rewardThreshold  Int      @default(100)
  rewardAmount     Float    @default(10)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("loyalty_programs")
}

model CustomerLoyalty {
  id                   String              @id @default(cuid())
  customerEmail        String              @unique
  customerName         String
  customerPhone        String?
  points               Int                 @default(0)
  totalPointsEarned    Int                 @default(0)
  totalPointsRedeemed  Int                 @default(0)
  rewardsRedeemed      Int                 @default(0)
  pointsHistory        PointsHistory[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  @@map("customer_loyalty")
}

model PointsHistory {
  id               String          @id @default(cuid())
  customerLoyaltyId String
  points           Int
  type             String          // 'earned' or 'redeemed'
  source           String          // 'booking', 'purchase', 'reward', 'manual', 'other'
  bookingId        String?
  description      String?
  createdAt        DateTime        @default(now())

  customerLoyalty  CustomerLoyalty @relation(fields: [customerLoyaltyId], references: [id], onDelete: Cascade)

  @@map("points_history")
}
