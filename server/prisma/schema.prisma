generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String
  role      String   @default("user")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("users")
}

model ServiceCategory {
  id           String    @id @default(cuid())
  name         String    @unique
  description  String?
  icon         String?
  displayOrder Int?      @default(0)
  isActive     Boolean?  @default(true)
  createdAt    DateTime? @default(now()) @db.Timestamp(6)
  updatedAt    DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  services     Service[]

  @@map("service_categories")
}

model Service {
  id           String           @id @default(cuid())
  categoryId   String
  name         String
  description  String?
  basePrice    Decimal          @db.Decimal(10, 2)
  baseDuration Int
  isActive     Boolean?         @default(true)
  displayOrder Int?             @default(0)
  createdAt    DateTime?        @default(now()) @db.Timestamp(6)
  updatedAt    DateTime?        @default(now()) @updatedAt @db.Timestamp(6)
  variants     ServiceVariant[]
  bookings     Booking[]
  category     ServiceCategory  @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("services")
}

model ServiceVariant {
  id               String                  @id @default(cuid())
  serviceId        String
  name             String
  description      String?
  type             String
  priceModifier    Decimal                 @db.Decimal(10, 2)
  durationModifier Int?                    @default(0)
  isActive         Boolean?                @default(true)
  displayOrder     Int?                    @default(0)
  createdAt        DateTime?               @default(now()) @db.Timestamp(6)
  updatedAt        DateTime?               @default(now()) @updatedAt @db.Timestamp(6)
  bookingVariants  BookingServiceVariant[]
  service          Service                 @relation(fields: [serviceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("service_variants")
}

model Staff {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  password      String
  phone         String?
  role          String    @default("staff")
  isActive      Boolean   @default(true)
  googleId      String?   @unique
  googleProfile String?
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]

  @@map("staff")
}

model Booking {
  id              String                  @id @default(cuid())
  customerName    String
  customerEmail   String
  customerPhone   String
  customerId      String?
  serviceId       String
  staffId         String?
  bookingDate     DateTime
  bookingTime     String
  status          String                  @default("pending")
  notes           String?
  totalPrice      Float?                  // Set by staff when confirming booking
  totalDuration   Int?                    @default(60)

  // Image storage for booking inspiration and current hair photos
  inspirationImages String[]              @default([])  // Array of image URLs/paths
  currentHairImages Json?                             // JSON object with front/back/top images

  // Loyalty program opt-in
  joinLoyalty     Boolean                 @default(false)  // Customer opted to join loyalty program

  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @default(now()) @updatedAt

  // Relations
  serviceVariants BookingServiceVariant[]
  customer        Customer?               @relation(fields: [customerId], references: [id])
  service         Service                 @relation(fields: [serviceId], references: [id])
  staff           Staff?                  @relation(fields: [staffId], references: [id])

  @@map("bookings")
}

model BookingServiceVariant {
  id        String         @id @default(cuid())
  bookingId String
  variantId String
  createdAt DateTime?      @default(now()) @db.Timestamp(6)
  booking   Booking        @relation(fields: [bookingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  variant   ServiceVariant @relation(fields: [variantId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("booking_service_variants")
}

model Feedback {
  id             String   @id @default(cuid())
  customerName   String
  customerEmail  String?
  serviceRating  Int
  staffRating    Int?
  overallRating  Int
  comments       String?
  serviceUsed    String?
  staffMember    String?
  wouldRecommend Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  @@map("feedback")
}

model Analytics {
  id         String   @id @default(cuid())
  type       String
  metadata   String?
  bookingId  String?
  feedbackId String?
  timestamp  DateTime @default(now())

  @@map("analytics")
}

model LoyaltyProgram {
  id                   String   @id @default(cuid())
  name                 String   @default("Hair Studio Rewards")
  description          String?
  pointsPerBooking     Int      @default(10)
  pointsPerDollar      Int      @default(1)
  rewardThreshold      Int      @default(100)
  rewardAmount         Float    @default(10.0)
  birthdayDiscountRate Float    @default(20.0)
  birthdayDiscountDays Int      @default(7)
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("loyalty_programs")
}

model Customer {
  id            String           @id @default(cuid())
  email         String           @unique
  password      String?
  name          String
  phone         String?
  dateOfBirth   DateTime?
  address       String?
  isActive      Boolean          @default(true)
  googleId      String?          @unique
  googleProfile String?
  avatar        String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  bookings      Booking[]
  loyalty       CustomerLoyalty?

  @@map("customers")
}

model CustomerLoyalty {
  id             String   @id @default(cuid())
  customerId     String   @unique
  customerEmail  String   @unique
  customerName   String
  customerPhone  String?
  totalPoints    Int      @default(0)
  lifetimePoints Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  customer       Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_loyalty")
}
